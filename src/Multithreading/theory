MULTITHREADING

It allows multiple threads (single unit of process) to run concurrently, providing better CPU utilization.

Provides in-built support -> mainly via 2 interfaces:
1. Thread class
2. Runnable Interface

1.	Thread class:
	•	Java provides the Thread class, which you can extend to create a new thread. By overriding the run() method, you can define the behavior of the thread.

2.	Runnable interface:
	•	The Runnable interface defines a single method, run(), which is used to implement a thread’s task.
	    The advantage is that a class can implement Runnable without extending the Thread class, allowing it to extend another class if needed (Java supports single inheritance).



RACE CONDITION:
A race condition occurs when 2 or more threads want to access a shared resource at the same time, and the final outcome depends on sequence or timing of their execution.

How to manage:-
1. Synchronized Blocks/Methods:
    It ensures that only 1 thread at a time can access the shared resource.
2. Locks:
    Java provides Lock interface for more flexible synchronization than synchronized.
3. Atomic Variables:
    Ensures that the operations on variable are atomic and thread-safe.